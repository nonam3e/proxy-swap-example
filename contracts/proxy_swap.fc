#include "imports/stdlib.fc";

{-
dedust_params:
dedust_address: MsgAddress
pool_address: MsgAddress
= DedustParams;
storage:
owner: MsgAddress
jetton_wallet: MsgAddress
_: ^DedustParams
forward_amount: Coins
= Storage;
-}

const int op::transfer_jetton        = 0x0f8a7ea5;
const int op::transfer_notification  = 0x7362d09c;
const int op::dedust_swap            = 0xe3a0d482;
const int const::gas = 60000000;
const int const::min_swap_price = 300000000;
const int const::one_ton = 1000000000;

int addr_none?(slice addr) asm "b{00} PUSHSLICE SDEQ";

() send_msg(slice to, int amount, int mode, cell body) impure inline {
    cell message = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to)
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(body)
        .end_cell();
    send_raw_message(message,mode);
}

() send_jettons(slice jetton_wallet, int ton_val, int mode, int query_id, int amount, slice to, slice response_destination, int forward_amount, cell forward_payload) impure inline {
    cell msg = begin_cell().store_uint(op::transfer_jetton, 32).store_uint(query_id, 64).store_coins(amount).store_slice(to).store_slice(response_destination).store_uint(0, 1).store_coins(forward_amount).store_uint(1, 1).store_ref(forward_payload).end_cell();
    send_msg(jetton_wallet, ton_val, mode, msg);
}

() send_jettons_without_payload(slice jetton_wallet, int ton_val, int mode, int query_id, int amount, slice to, slice response_destination) impure inline {
    cell msg = begin_cell().store_uint(op::transfer_jetton, 32).store_uint(query_id, 64).store_coins(amount).store_slice(to).store_slice(response_destination).store_uint(0, 1).store_coins(1).store_uint(0, 1).end_cell();
    send_msg(jetton_wallet, ton_val, mode, msg);
}

cell create_dedust_payload(slice recipient_address, slice referal_address, slice pool_address, int amount) inline {
    cell params = begin_cell().store_uint(0, 32).store_slice(recipient_address).store_slice(referal_address).store_uint(0,2).end_cell();
    return begin_cell().store_uint(op::dedust_swap, 32).store_slice(pool_address).store_uint(0,1).store_coins(muldiv(const::min_swap_price, amount, const::one_ton)).store_uint(0, 1).store_ref(params).end_cell();
}

_ load_data() inline {
    var ds = get_data().begin_parse();
    var in_ds = ds~load_ref().begin_parse();
    return(ds~load_msg_addr(), ds~load_msg_addr(), in_ds~load_msg_addr(), in_ds~load_msg_addr(), ds~load_coins());
}

() save_data(slice owner, slice jetton_wallet, slice dedust_address, slice pool_address, int forward_amount) impure inline {
    set_data(begin_cell().store_slice(owner).store_slice(jetton_wallet).store_ref(begin_cell().store_slice(dedust_address).store_slice(pool_address).end_cell()).store_coins(forward_amount).end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    var(owner, jetton_wallet, dedust_address, pool_address, forward_amount) = load_data();

    int op = in_msg_body~load_uint(32);
    if (op == 1) { ;; service message
        throw_unless(99, equal_slices(owner, sender_address));
        int mode = in_msg_body~load_uint(8);
        cell message = in_msg_body~load_ref();
        send_raw_message(message,mode);
        return ();
    }
    if (op == 2) { ;; set jw
        throw_unless(99, equal_slices(owner, sender_address));
        throw_unless(100, addr_none?(jetton_wallet));
        jetton_wallet = in_msg_body~load_msg_addr();
        save_data(owner, jetton_wallet, dedust_address, pool_address, forward_amount);
        return ();
    }
    if (op == op::transfer_notification) {
        var(query_id, amount, sender_jetton) = (in_msg_body~load_uint(64), in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        if ((~ equal_slices(sender_address, jetton_wallet)) | ( msg_value < (forward_amount + const::gas))) {
            send_jettons_without_payload(jetton_wallet, 0, 64, query_id, amount, sender_jetton, sender_jetton);
        }
        else {
            cell swap_body = create_dedust_payload(sender_jetton, owner, pool_address, amount);
            send_jettons(jetton_wallet, 0, 64, query_id, amount, dedust_address, sender_jetton, forward_amount, swap_body);
        }
        return ();
    }
    throw(0xffff);
}

_ get_params() method_id {
    return load_data();
}